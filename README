8086 Disassembler
━━━━━━━━━━━━━━━━━
An x86 disassembler which supports the original Intel 8086/8088 instructions.

This disassembler is partly derived from one written in x86 Assembly language by Gustas Zilinskas
during the first semester of Software Engineering programme in Vilnius University (VU),
has been translated into C, and is being made more compatible with DEBUG.EXE.

The original x86 assembly-language program has been phased out, having been replaced by its translation to C.

Features
────────
∙	Supports every instruction from the original Intel 8086/8088 instruction set
∙	Fully-buffered file I/O
∙	Reads from and writes to files whose names are give as command-line arguments
∙	Prints helpful error messages for various different I/O errors

ToDo's
──────
―	[ ] Output the results in a more-readable DOS Debug format
―	[ ] Display of non-code segments as data segments
	▪	Expanding the use of the pseudo-mnemonic "db" to the display of non-code data sections.
―	[ ] "Exceptional" Opcodes
	▪	Floating Point Escapes:
		There's no reason to treat the floating point escapes specially - their format is standard,
		essentially the same as opcodes 84h or 85h (to cite the two most typical cases).
		In octal, the opcode sequences are \33D \xrm [ExtraBytes],
		which is "escape D" with (nominal) "register" r=0,1,2,3,4,5,6,7 and (nominal) "address mode" (x,m)
		and "ExtraBytes" dictated by the values of the octal digits x=0,1,2,3 and m=0,1,2,3,4,5,6,7.
	▪	BCD Arithmetic:
		Similarly, "aam" and "aad" do not really need to be treated specially,
		but could be treated the same way as "int P" (opcode \315, i.e. 0cdh).

Usage
─────
The executable accepts two command-line arguments:
	―	InFile - the input file
		This should be a binary image of the program.
		Support may later be added for DOS EXE file format.
	―	ExFile - the x86 disassembly of the input file.
and the command-line syntax has the form:
	Dis86 InFile ExFile
For example, to disassemble a binary `test.bin` and output the disassembly result into `test.asm`, run:
	Dis86 test.bin test.asm
An example of this is provided in a test routine included with this distribution.

Notes
─────
∙	This program was intended to be used with COM files, and originally had a starting 0x0100 offset.
	The offset has been moved to 0, suited for binary images, and may later be generalized to allow relocation.
∙	The original author assembled this program with Turbo Assembler 3.1 and linked with Turbo Link 3.0.
	It was ported to "jwasm" to remove the DOS-dependency for the assembly of the program.
	It was translated to C to remove the DOS-dependency for the execution of the program.
